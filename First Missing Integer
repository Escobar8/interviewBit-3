Given an unsorted integer array, find the first missing positive integer.

Example:

Given [1,2,0] return 3,

[3,4,-1,1] return 2,

[-8, -7, -6] returns 1

Your algorithm should run in O(n) time and use constant space.

*********************************************************************************************************

int Solution::firstMissingPositive(vector<int> &A) {
sort(A.begin(), A.end());
int start = 0;
while(A[start] != 1 && start<A.size()){
    start++;
}
if(start == A.size()) return 1;
else{
    for(int i=start+1 ; i<A.size() ; i++){
        if(A[i] != A[i-1]+1) return A[i-1]+1;
    }
    return A[A.size()-1]+1;
}
}
