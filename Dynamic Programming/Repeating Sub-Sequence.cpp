Given a string, find if there is any sub-sequence that repeats itself.
A sub-sequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters.

Input: 
string

Output:

0/1
0 -> No
1 -> Yes 
Example:

abab ------> yes, ab is repeated. So, return 1. 
abba ------> No, a and b follow different order. So, return 0. 
NOTE : sub-sequence length should be greater than or equal to 2

*******************************************************************************************************************************

int isPalindrome(char str[], int l, int h)
{
    while (h > l)
        if (str[l++] != str[h--])
            return 0;
 
    return 1;
} 
 
int anytwo(char* str) {
    int n = strlen(str);
    int freq[256] = { 0 };
    int i;
    for ( i = 0; i < n; i++)
    {
        freq[str[i]]++;
        if (freq[str[i]] >= 3)
            return 1;
    }
 
    int k = 0;
    for ( i = 0; i < n; i++)
        if (freq[str[i]] > 1)
            str[k++] = str[i];
    str[k] = '\0';
    if (isPalindrome(str, 0, k-1) == 1)
    {
        return 0;
    }
    return 1;
}
