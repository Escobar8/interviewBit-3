Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7  might become 4 5 6 7 0 1 2 ).

You are given a target value to search. If found in the array, return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Input : [4 5 6 7 0 1 2] and target = 4
Output : 0

NOTE : Think about the case when there are duplicates. Does your current solution work? How does the time complexity change?*

*****************************************************************************************************************

int Solution::search(const vector<int> &A, int B) {
   int min = 0, max = A.size()-1;
   while(min<= max){
       int mid = (min+max)/2;
       if(A[mid] == B)return mid;
       else if (A[mid]<= A[max] ){
           if(B > A[mid] && B <= A[max]) min = mid+1;
           else max = mid-1;
       }
       else if(A[mid] >= A[min]){
            if(B < A[mid] && B>=A[min]) max = mid-1;
            else min = mid+1;
       }
   }
   return -1;
}
