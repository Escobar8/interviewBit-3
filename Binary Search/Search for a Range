Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithmâ€™s runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example:

Given [5, 7, 7, 8, 8, 10]

and target value 8,

return [3, 4].

********************************************************************************************************

int end(const vector<int> &A, int B){
    int s = 0 , e = A.size()-1 , pos = -1;
    while(s<=e){
        int mid = (s+e)/2;
        if(A[mid] == B) { pos  = mid ;s = mid+1;}
        else if(B<A[mid])e = mid-1;
        else s = mid+1;
    }
    return pos;
}
int start(const vector<int> &A, int B){
    int s = 0 , e = A.size()-1 , pos = -1;
    while(s<=e){
        int mid = (s+e)/2;
        if(A[mid] == B) { pos  = mid ;e = mid-1;}
        else if(B<A[mid])e = mid-1;
        else s = mid+1;
    }
    return pos;
}

vector<int> Solution::searchRange(const vector<int> &A, int B) {
  vector<int> res;
    res.push_back(start(A,B));
    res.push_back(end(A,B));
    return res;
}
